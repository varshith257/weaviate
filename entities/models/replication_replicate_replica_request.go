//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationReplicateReplicaRequest Request body to add a replica of given shard of a given collection
//
// swagger:model ReplicationReplicateReplicaRequest
type ReplicationReplicateReplicaRequest struct {

	// The collection name holding the shard
	// Required: true
	CollectionID *string `json:"collectionId"`

	// The node to add a copy of the replica on
	// Required: true
	DestinationNodeName *string `json:"destinationNodeName"`

	// The shard id holding the replica to be copied
	// Required: true
	ShardID *string `json:"shardId"`

	// The node containing the replica
	// Required: true
	SourceNodeName *string `json:"sourceNodeName"`
}

// Validate validates this replication replicate replica request
func (m *ReplicationReplicateReplicaRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNodeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationReplicateReplicaRequest) validateCollectionID(formats strfmt.Registry) error {

	if err := validate.Required("collectionId", "body", m.CollectionID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationReplicateReplicaRequest) validateDestinationNodeName(formats strfmt.Registry) error {

	if err := validate.Required("destinationNodeName", "body", m.DestinationNodeName); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationReplicateReplicaRequest) validateShardID(formats strfmt.Registry) error {

	if err := validate.Required("shardId", "body", m.ShardID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationReplicateReplicaRequest) validateSourceNodeName(formats strfmt.Registry) error {

	if err := validate.Required("sourceNodeName", "body", m.SourceNodeName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replication replicate replica request based on context it is used
func (m *ReplicationReplicateReplicaRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationReplicateReplicaRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationReplicateReplicaRequest) UnmarshalBinary(b []byte) error {
	var res ReplicationReplicateReplicaRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
